//===-- QpuSubtarget.h - Define Subtarget for the Qpu ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Qpu specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef QPUSUBTARGET_H
#define QPUSUBTARGET_H

#include "llvm/Target/TargetSubtargetInfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "QpuGenSubtargetInfo.inc"

extern bool QpuNoCpload;

namespace llvm {
class StringRef;

class QpuSubtarget : public QpuGenSubtargetInfo {
  virtual void anchor();

public:
  // NOTE: O64 will not be supported.
  enum QpuABIEnum {
    UnknownABI, O32
  };

protected:
  enum QpuArchEnum {
    Qpu32I
  };

  // Qpu architecture version
  QpuArchEnum QpuArchVersion;

  // Qpu supported ABIs
  QpuABIEnum QpuABI;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  // HasCmp - cmp instructions.
  bool HasCmp;

  // HasSlt - slt instructions.
  bool HasSlt;

  InstrItineraryData InstrItins;

  // Relocation Model
  Reloc::Model RM;

  // UseSmallSection - Small section is used.
  bool UseSmallSection;

public:
  unsigned getTargetABI() const { return QpuABI; }

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  QpuSubtarget(const std::string &TT, const std::string &CPU,
                const std::string &FS, bool little, Reloc::Model _RM);

//- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasQpu32I() const { return QpuArchVersion >= Qpu32I; }
  bool isQpu32I() const { return QpuArchVersion == Qpu32I; }

  /// Features related to the presence of specific instructions.
  bool hasCmp()   const { return HasCmp; }
  bool hasSlt()   const { return HasSlt; }

  bool useSmallSection() const { return UseSmallSection; }
};
} // End llvm namespace

#endif
